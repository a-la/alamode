{"version":3,"sources":["../../src/lib/source-map.js"],"names":[],"mappings":"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","file":"lib/source-map.js","sourcesContent":["import { relative, resolve, join } from 'path'\nimport { appendFileSync, writeFileSync } from 'fs'\nimport { SourceMapGenerator } from 'source-map'\nimport { inlineCommentsRe, commentsRe } from '.'\n\nconst writeSourceMap = ({\n  inputPath, relPath, output, name, source,\n}) => {\n  const file = join(relPath, name)\n  const rel = relative(resolve(output, relPath), inputPath)\n  const outputPath = resolve(output, file)\n\n  const gen = new SourceMapGenerator({\n    file,\n  })\n  const linesInSource = source\n    .replace(commentsRe, (match, pos) => {\n      const next = source[pos + match.length]\n      if (next == '\\n') return '\\n'.repeat(match.split('\\n').length - 1)\n\n      const lines = match.split('\\n')\n      const lastLineI = lines.length - 1\n      const lastLine = lines[lastLineI]\n      const ss = ' '.repeat(lastLine.length)\n      const ws = '\\n'.repeat(lastLineI)\n      return `${ws}${ss}`\n    })\n    .replace(inlineCommentsRe, (match) => {\n      return ' '.repeat(match.length)\n    })\n    .split('\\n')\n  linesInSource.forEach((l, i) => {\n    const line = i + 1\n    l\n      .replace(/(?:(?:\\s+)|(?:[$_\\w\\d]+)|.)/g, (match, column) => {\n        if (column == 0 && /^\\s+$/.test(match)) return\n        const pp = {\n          line,\n          column,\n        }\n        const m = {\n          generated: pp,\n          source: rel,\n          original: pp,\n        }\n        gen.addMapping(m)\n      })\n  })\n  gen.setSourceContent(rel, source)\n  const sourceMap = gen.toString()\n  const sourceMapName = `${name}.map`\n  const comment = `\\n//# sourceMappingURL=${sourceMapName}`\n  const sourceMapFile = resolve(output, relPath, sourceMapName)\n  appendFileSync(outputPath, comment)\n  writeFileSync(sourceMapFile, sourceMap)\n}\n\nexport default writeSourceMap"]}