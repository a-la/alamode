{"version":3,"sources":["../../src/lib/transform.js"],"names":[],"mappings":"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","file":"lib/transform.js","sourcesContent":["import {\n  Replaceable,\n  makeMarkers, makeCutRule, makePasteRule,\n} from 'restream'\nimport ALaImport from '@a-la/import'\nimport ALaExport from '@a-la/export'\nimport whichStream from 'which-stream'\nimport Catchment from 'catchment'\nimport { createReadStream } from 'fs'\nimport { commentsRe, inlineCommentsRe } from '.'\nimport { getMap } from './source-map'\nimport { basename, dirname } from 'path';\n\nconst makeRules = () => {\n  const { comments, inlineComments } = makeMarkers({\n    comments: commentsRe,\n    inlineComments: inlineCommentsRe,\n    string: /'(.*)'/gm,\n  })\n  const mr = [comments, inlineComments]\n  const [cutComments, cutInlineComments] = mr\n    .map(makeCutRule)\n  const [pasteComments, pasteInlineComments] = mr\n    .map(makePasteRule)\n\n  const rules = [\n    cutComments,\n    cutInlineComments,\n    ...ALaImport,\n    ...ALaExport,\n    pasteInlineComments,\n    pasteComments,\n  ]\n  return rules\n}\n\nconst makeReplaceable = () => {\n  const rules = makeRules()\n  const replaceable = new Replaceable(rules)\n  return replaceable\n}\n\n/**\n * Run a transform stream.\n */\nexport const transformStream = async ({\n  source,\n  destination,\n}) => {\n  const replaceable = makeReplaceable()\n\n  const readable = createReadStream(source)\n\n  readable.pipe(replaceable)\n  const { promise: sourcePromise } = new Catchment({ rs: readable })\n\n  const [,, sourceCode] = await Promise.all([\n    whichStream({\n      source,\n      destination,\n      readable: replaceable,\n    }),\n    new Promise((r, j) => {\n      readable.once('error', j)\n      replaceable.once('error', j)\n      replaceable.once('end', r)\n    }),\n    sourcePromise,\n  ])\n\n  return sourceCode\n}\n\nclass Context {\n  constructor() {\n    this.listeners = {}\n  }\n  on(event, listener) {\n    this.listeners[event] = listener\n  }\n  emit(event, data) {\n    this.listeners[event](data)\n  }\n}\n\n/**\n * @param {string} source Source code as a string.\n */\nexport const syncTransform = (source, filename) => {\n  const rules = makeRules()\n  const context = new Context()\n\n  const replaced = rules.reduce((acc, { re, replacement }) => {\n    const newAcc = acc.replace(re, replacement.bind(context))\n    return newAcc\n  }, source)\n\n  const file = basename(filename)\n  const sourceRoot = dirname(filename)\n  const map = getMap({\n    originalSource: source,\n    pathToSrc: file,\n    sourceRoot,\n  })\n  const b64 = Buffer.from(map).toString('base64')\n  const s = `//# sourceMappingURL=data:application/json;charset=utf-8;base64,${b64}`\n\n  const code = `${replaced}\\n${s}`\n\n  return code\n}"]}